@page "/counter"
@inject IJSRuntime JS

<script type="text/javascript">
function addNewRelicPageAction (currentCount) {
    newrelic.addPageAction('counterClicked', { currentCount: currentCount });
    return "success";
}
</script>

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@using OpenTelemetry;
@using OpenTelemetry.Resources
@using OpenTelemetry.Trace
@using System.Diagnostics

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
        Trace(currentCount);
        JS.InvokeAsync<string>("addNewRelicPageAction", currentCount);
    }

    private void Trace(int currentCount)
    {
        using var openTelemetry = Sdk.CreateTracerProviderBuilder()
        .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService("BlazorWASMFrontend"))
        .AddSource("BlazorUI")
        .AddConsoleExporter()
        /*.AddOtlpExporter(o =>
        {
        o.Endpoint = new Uri("https://otlp.nr-data.net");
        o.Headers = "api-key=MY_NEW_RELIC_LICENSE_KEY";
        o.Protocol = OpenTelemetry.Exporter.OtlpExportProtocol.HttpProtobuf;
        //o.ExportProcessorType = ExportProcessorType.Simple;
        })*/
        .Build();
        using var source = new ActivitySource("BlazorUI");
        using (var activity = source.StartActivity("Click", ActivityKind.Client))
        {
            activity?.AddEvent(new ActivityEvent("The count button was clicked"));

            activity?.SetTag("count", currentCount);
            activity?.SetTag("mouse.x", 123);
            activity?.SetTag("mouse.y", 2323);
        }
    }
}
